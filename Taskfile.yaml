version: "3"

tasks:
  default:
    desc: Runs all of the default tasks
    cmds:
      - task: ci

  ci:
    desc: Run all CI tasks
    cmds:
      - task: deps
      - task: unit-test
      - task: lint

  deps:
    desc: Install all dependencies
    cmds:
      - go mod tidy

  test:
    desc: Run all of the tests
    cmds:
      - task: unit-test
      - task: docker-test

  unit-test:
    desc: Run the unit tests
    vars:
      TEST_FORMAT: '{{default "" .TEST_FORMAT}}'
      COVER_PROFILE: '{{default "coverage.out" .COVER_PROFILE}}'
      TEST_OPTIONS: '{{default "-short -race -vet=off -shuffle=on -p 1" .TEST_OPTIONS}}'
    cmds:
      - go test {{.TEST_OPTIONS}} -covermode=atomic -coverprofile={{.COVER_PROFILE}} {{.TEST_FORMAT}} ./...

  docker-test:
    desc: Run the docker-based tests
    cmds:
      - docker build . -t gitz-test:latest -f testdata/Dockerfile --build-arg test=tagsigned
      - docker build . -t gitz-test:latest -f testdata/Dockerfile --build-arg test=tagsigningkey
      - docker build . -t gitz-test:latest -f testdata/Dockerfile --build-arg test=commitsigned
      - docker build . -t gitz-test:latest -f testdata/Dockerfile --build-arg test=commitsigningkey
      - docker build . -t gitz-test:latest -f testdata/Dockerfile --build-arg test=showcommit

  lint:
    desc: Lint the code using golangci-lint
    vars:
      REPORT_FORMAT: '{{default "colored-line-number" .REPORT_FORMAT}}'
    cmds:
      - golangci-lint run --timeout 5m0s --out-format {{.REPORT_FORMAT}}

  format:
    desc: Format the code using gofumpt
    cmds:
      - gofumpt -w -l .
